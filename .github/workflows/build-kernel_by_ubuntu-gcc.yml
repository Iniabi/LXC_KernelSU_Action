name: Build Kernel by ubuntu-gcc
on:
  watch:
    types: [started]

  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
    - uses: actions/checkout@v4

    - name: Prepare Configuration
      run: |
        CONFIG_ENV=$(cat config.env | grep -w "CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)
        echo "KERNEL_SOURCE=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV 
        echo "KERNEL_SOURCE_BRANCH=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV 
        echo "KERNEL_CONFIG=$(cat $CONFIG_ENV | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_IMAGE_NAME=$(cat $CONFIG_ENV | grep -w "KERNEL_IMAGE_NAME" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ARCH=$(cat $CONFIG_ENV | grep -w "ARCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "EXTRA_CMDS=$(cat $CONFIG_ENV | grep -w "EXTRA_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_CLANG=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_CLANG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV 
        echo "CUSTOM_CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CMDS=$(cat $CONFIG_ENV | grep -w "CUSTOM_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
        echo "CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CLANG_VERSION=$(cat $CONFIG_ENV | grep -w "CLANG_VERSION" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_GCC_ARM64=$(cat $CONFIG_ENV | grep -w "ENABLE_GCC_ARM64" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_GCC_ARM32=$(cat $CONFIG_ENV | grep -w "ENABLE_GCC_ARM32" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_GCC_64=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_GCC_64" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_64_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV 
        echo "CUSTOM_GCC_64_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_64_BIN=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_BIN" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_GCC_32=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_GCC_32" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_32_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV 
        echo "CUSTOM_GCC_32_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_32_BIN=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_BIN" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_KERNELSU=$(cat $CONFIG_ENV | grep -w "ENABLE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNELSU_TAG=$(cat $CONFIG_ENV | grep -w "KERNELSU_TAG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_KPROBES_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_KPROBES_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "DISABLE-LTO=$(cat $CONFIG_ENV | grep -w "DISABLE-LTO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_OVERLAYFS_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_OVERLAYFS_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "DISABLE_CC_WERROR=$(cat $CONFIG_ENV | grep -w "DISABLE_CC_WERROR" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_CCACHE=$(cat $CONFIG_ENV | grep -w "ENABLE_CCACHE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "NEED_DTBO=$(cat $CONFIG_ENV | grep -w "NEED_DTBO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "BUILD_BOOT_IMG=$(cat $CONFIG_ENV | grep -w "BUILD_BOOT_IMG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "SOURCE_BOOT_IMAGE=$(cat $CONFIG_ENV | grep -w "SOURCE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV 
        echo "KSU_EXPECTED_SIZE=$(cat $CONFIG_ENV | grep -w "KSU_EXPECTED_SIZE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KSU_EXPECTED_HASH=$(cat $CONFIG_ENV | grep -w "KSU_EXPECTED_HASH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_LXC=$(cat $CONFIG_ENV | grep -w "ENABLE_LXC" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV

    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update -y && sudo apt-get upgrade -y
        sudo apt remove gcc g++ -y && sudo apt-get install -y llvm lld gcc-aarch64-linux-gnu g++-aarch64-linux-gnueabi gcc-arm-linux-gnueabi g++-arm-linux-gnueabi gcc g++ git gnupg binutils-arm-linux-gnueabi binutils-aarch64-linux-gnu curl wget vim ccache automake flex lzop bison gperf zip zlib1g-dev libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optip
        sudo apt-get install -y make clang llvm libssl-dev libelf-dev libncurses-dev libz-dev bc
        sudo apt-get install -y device-tree-compiler build-essential python3 python3-pip python3-dev
        sudo apt-get install -y libtool autoconf pkg-config unzip

    - name: Set up clang toolchain
      if: ${{ env.USE_CUSTOM_CLANG == 'true' }}
      run: |
        echo "Using custom clang toolchain"
        git clone --single-branch --branch ${{ env.CLANG_BRANCH }} ${{ env.CUSTOM_CLANG_SOURCE }} clang
        cd clang
        ./build.py --prefix=/usr/local
        sudo ln -sf /usr/local/bin/clang /usr/bin/clang
        sudo ln -sf /usr/local/bin/clang++ /usr/bin/clang++

    - name: Set up gcc toolchain for arm64
      if: ${{ env.ENABLE_GCC_ARM64 == 'true' }}
      run: |
        echo "Setting up arm64 gcc toolchain"
        git clone --single-branch --branch ${{ env.CUSTOM_GCC_64_BRANCH }} ${{ env.CUSTOM_GCC_64_SOURCE }} gcc-arm64
        cd gcc-arm64
        export PATH=$PATH:$(pwd)/bin
        sudo ln -sf $(pwd)/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc
        sudo ln -sf $(pwd)/bin/aarch64-linux-gnu-g++ /usr/bin/aarch64-linux-gnu-g++

    - name: Set up gcc toolchain for arm32
      if: ${{ env.ENABLE_GCC_ARM32 == 'true' }}
      run: |
        echo "Setting up arm32 gcc toolchain"
        git clone --single-branch --branch ${{ env.CUSTOM_GCC_32_BRANCH }} ${{ env.CUSTOM_GCC_32_SOURCE }} gcc-arm32
        cd gcc-arm32
        export PATH=$PATH:$(pwd)/bin
        sudo ln -sf $(pwd)/bin/arm-linux-gnueabi-gcc /usr/bin/arm-linux-gnueabi-gcc
        sudo ln -sf $(pwd)/bin/arm-linux-gnueabi-g++ /usr/bin/arm-linux-gnueabi-g++

    - name: Setup kernel source
      run: |
        echo "Cloning Kernel source"
        git clone --single-branch --branch ${{ env.KERNEL_SOURCE_BRANCH }} ${{ env.KERNEL_SOURCE }} kernel
        cd kernel
        git checkout ${{ env.KERNEL_SOURCE_BRANCH }}
        if [ -f "${{ env.KERNEL_CONFIG }}" ]; then
          cp ${{ env.KERNEL_CONFIG }} .config
        else
          echo "Kernel config file not found, using default"
        fi

    - name: Apply KERNELSU patch
      if: ${{ env.ENABLE_KERNELSU == 'true' }}
      run: |
        echo "Applying KERNELSU patch"
        git clone --single-branch --branch ${{ env.KERNELSU_TAG }} https://github.com/XYZ/KERNELSU kernelSU
        cd kernelSU
        git apply < kernelSU.patch
        cd ..
        
    - name: Apply additional configuration
      if: ${{ env.ADD_KPROBES_CONFIG == 'true' }}
      run: |
        echo "Adding kprobes config"
        echo "CONFIG_KPROBES=y" >> .config

    - name: Disable LTO if required
      if: ${{ env.DISABLE_LTO == 'true' }}
      run: |
        echo "Disabling LTO"
        echo "CONFIG_LTO_CLANG=y" >> .config
        echo "CONFIG_LTO=n" >> .config

    - name: Enable OverlayFS config if needed
      if: ${{ env.ADD_OVERLAYFS_CONFIG == 'true' }}
      run: |
        echo "Enabling OverlayFS config"
        echo "CONFIG_OVERLAY_FS=y" >> .config

    - name: Disable CC Werror
      if: ${{ env.DISABLE_CC_WERROR == 'true' }}
      run: |
        echo "Disabling CC Werror"
        echo "CONFIG_CC_WARN_UNUSED_FUNCTIONS=n" >> .config
        echo "CONFIG_CC_WARN_UNUSED_RESULT=n" >> .config

    - name: Enable ccache
      if: ${{ env.ENABLE_CCACHE == 'true' }}
      run: |
        echo "Enabling ccache"
        export USE_CCACHE=1
        export CCACHE_DIR=/tmp/.ccache

    - name: Build the Kernel
      run: |
        echo "Start building the Kernel"
        make -j$(nproc) zImage

    - name: Build the dtbo (Device Tree Blob)
      if: ${{ env.NEED_DTBO == 'true' }}
      run: |
        echo "Building Device Tree Blob"
        make -j$(nproc) dtbo

    - name: Build the Boot Image
      if: ${{ env.BUILD_BOOT_IMG == 'true' }}
      run: |
        echo "Building Boot Image"
        make -j$(nproc) boot.img

    - name: Generate Kernel Image
      run: |
        echo "Generating Kernel Image"
        cp arch/${{ env.ARCH }}/boot/zImage ${GITHUB_WORKSPACE}/${{ env.KERNEL_IMAGE_NAME }}.img
        echo "Kernel image created: ${{ env.KERNEL_IMAGE_NAME }}.img"

    - name: Upload Kernel Image to Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kernel_image
        path: ${{ env.KERNEL_IMAGE_NAME }}.img

    - name: Upload dtbo to Artifacts
      if: ${{ env.NEED_DTBO == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: dtbo
        path: dtbo

    - name: Upload Boot Image to Artifacts
      if: ${{ env.BUILD_BOOT_IMG == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: boot_image
        path: boot.img

    - name: Notify completion
      run: |
        echo "Kernel build process completed successfully"
