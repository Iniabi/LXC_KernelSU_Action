name: Build Kernel by ubuntu-gcc
on:
  watch:
    types: [started]
  workflow_dispatch:
jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
    - uses: actions/checkout@v4
    - name: Prepare Configuration
      run: |
        CONFIG_ENV=$(cat config.env | grep -w "CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)
        echo "KERNEL_SOURCE=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_CONFIG=$(cat $CONFIG_ENV | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_IMAGE_NAME=$(cat $CONFIG_ENV | grep -w "KERNEL_IMAGE_NAME" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ARCH=$(cat $CONFIG_ENV | grep -w "ARCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "EXTRA_CMDS=$(cat $CONFIG_ENV | grep -w "EXTRA_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_CLANG=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_CLANG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CMDS=$(cat $CONFIG_ENV | grep -w "CUSTOM_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
        echo "CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CLANG_VERSION=$(cat $CONFIG_ENV | grep -w "CLANG_VERSION" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_GCC_ARM64=$(cat $CONFIG_ENV | grep -w "ENABLE_GCC_ARM64" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_GCC_ARM32=$(cat $CONFIG_ENV | grep -w "ENABLE_GCC_ARM32" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_GCC_64=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_GCC_64" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_64_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_64_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_64_BIN=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_BIN" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_GCC_32=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_GCC_32" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_32_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_32_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_32_BIN=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_BIN" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_KERNELSU=$(cat $CONFIG_ENV | grep -w "ENABLE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNELSU_TAG=$(cat $CONFIG_ENV | grep -w "KERNELSU_TAG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_KPROBES_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_KPROBES_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "DISABLE-LTO=$(cat $CONFIG_ENV | grep -w "DISABLE-LTO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_OVERLAYFS_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_OVERLAYFS_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "DISABLE_CC_WERROR=$(cat $CONFIG_ENV | grep -w "DISABLE_CC_WERROR" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_CCACHE=$(cat $CONFIG_ENV | grep -w "ENABLE_CCACHE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "NEED_DTBO=$(cat $CONFIG_ENV | grep -w "NEED_DTBO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "BUILD_BOOT_IMG=$(cat $CONFIG_ENV | grep -w "BUILD_BOOT_IMG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "SOURCE_BOOT_IMAGE=$(cat $CONFIG_ENV | grep -w "SOURCE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KSU_EXPECTED_SIZE=$(cat $CONFIG_ENV | grep -w "KSU_EXPECTED_SIZE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KSU_EXPECTED_HASH=$(cat $CONFIG_ENV | grep -w "KSU_EXPECTED_HASH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_LXC=$(cat $CONFIG_ENV | grep -w "ENABLE_LXC" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10
    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update -y && sudo apt-get upgrade -y
        sudo apt remove gcc g++ -y && sudo apt-get install -y llvm lld gcc-aarch64-linux-gnu g++-aarch64-linux-gnueabi gcc-arm-linux-gnueabi g++-arm-linux-gnueabi gcc g++ git gnupg binutils-arm-linux-gnueabi binutils-aarch64-linux-gnu curl wget vim ccache automake flex lzop bison gperf zip zlib1g-dev libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4
        sudo apt-get install -y liblz4-dev libssl-dev bc libncurses5-dev libncurses-dev libz-dev
        git clone --single-branch https://github.com/${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} $HOME/kernel
        cd $HOME/kernel
        git submodule update --init --recursive
        make ARCH=${{ env.ARCH }} O=out ${env.KERNEL_CONFIG}
    - name: Set up Clang or GCC
      run: |
        if [ "${{ env.USE_CUSTOM_CLANG }}" == "true" ]; then
          git clone https://github.com/${{ env.CUSTOM_CLANG_SOURCE }} -b ${{ env.CUSTOM_CLANG_BRANCH }} $HOME/clang
          export PATH=$HOME/clang/bin:$PATH
        fi
        if [ "${{ env.USE_CUSTOM_GCC_64 }}" == "true" ]; then
          git clone https://github.com/${{ env.CUSTOM_GCC_64_SOURCE }} -b ${{ env.CUSTOM_GCC_64_BRANCH }} $HOME/gcc64
          export PATH=$HOME/gcc64/bin:$PATH
        fi
        if [ "${{ env.USE_CUSTOM_GCC_32 }}" == "true" ]; then
          git clone https://github.com/${{ env.CUSTOM_GCC_32_SOURCE }} -b ${{ env.CUSTOM_GCC_32_BRANCH }} $HOME/gcc32
          export PATH=$HOME/gcc32/bin:$PATH
        fi
    - name: Build Kernel
      run: |
        if [ "${{ env.ENABLE_GCC_ARM64 }}" == "true" ]; then
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        if [ "${{ env.ENABLE_GCC_ARM32 }}" == "true" ]; then
          export CROSS_COMPILE=arm-linux-gnueabi-
        fi
        make -j$(nproc) ARCH=${{ env.ARCH }} O=out
    - name: Build DTBO if needed
      run: |
        if [ "${{ env.NEED_DTBO }}" == "true" ]; then
          make dtbs -j$(nproc) ARCH=${{ env.ARCH }} O=out
        fi
    - name: Build Boot Image if needed
      run: |
        if [ "${{ env.BUILD_BOOT_IMG }}" == "true" ]; then
          make bootimage -j$(nproc) ARCH=${{ env.ARCH }} O=out
        fi
    - name: Build KernelSU if enabled
      run: |
        if [ "${{ env.ENABLE_KERNELSU }}" == "true" ]; then
          cd $HOME/kernel
          git clone https://github.com/${{ env.KERNELSU_TAG }} kernelSU
          cd kernelSU
          make -j$(nproc) ARCH=${{ env.ARCH }} O=out
        fi
    - name: Upload Kernel Image
      if: always()
      run: |
        mkdir -p $GITHUB_WORKSPACE/artifacts
        cp $HOME/kernel/out/arch/${{ env.ARCH }}/boot/Image.gz-dtb $GITHUB_WORKSPACE/artifacts/
        cp $HOME/kernel/out/arch/${{ env.ARCH }}/boot/dts/*.dtb $GITHUB_WORKSPACE/artifacts/
    - name: Upload Kernel Modules
      if: always()
      run: |
        mkdir -p $GITHUB_WORKSPACE/modules
        cp -r $HOME/kernel/out/modules/* $GITHUB_WORKSPACE/modules/
    - name: Upload Kernel Logs
      if: always()
      run: |
        mkdir -p $GITHUB_WORKSPACE/logs
        cp -r $HOME/kernel/out/ $GITHUB_WORKSPACE/logs/
    - name: Create Boot Image and KernelSU Overlay
      run: |
        if [ "${{ env.ENABLE_KERNELSU }}" == "true" ]; then
          if [ "${{ env.KSU_EXPECTED_SIZE }}" == "$(stat -c %s $GITHUB_WORKSPACE/artifacts/Image.gz-dtb)" ]; then
            echo "Kernel image size matches."
          else
            echo "Kernel image size mismatch!"
            exit 1
          fi
          if [ "${{ env.KSU_EXPECTED_HASH }}" == "$(sha256sum $GITHUB_WORKSPACE/artifacts/Image.gz-dtb | cut -d ' ' -f 1)" ]; then
            echo "Kernel image hash matches."
          else
            echo "Kernel image hash mismatch!"
            exit 1
          fi
        fi
